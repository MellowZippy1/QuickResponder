// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickResponder.Infrastructure;

#nullable disable

namespace QuickResponder.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240130123736_EditedPrescriptions")]
    partial class EditedPrescriptions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.1");

            modelBuilder.Entity("QuickResponder.Domain.Allergy", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("Allergy");
                });

            modelBuilder.Entity("QuickResponder.Domain.Incident", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResponderID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.HasIndex("ResponderID");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("QuickResponder.Domain.MedicalCondition", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalCondition");
                });

            modelBuilder.Entity("QuickResponder.Domain.MedicalDevice", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("MedicalDevice");
                });

            modelBuilder.Entity("QuickResponder.Domain.Medication", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("QuickResponder.Domain.Patient", b =>
                {
                    b.Property<Guid>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BloodType")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Religion")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("PatientID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("QuickResponder.Domain.Prescription", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Dosage")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("TimeBetweenDosages")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PatientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("QuickResponder.Domain.Responder", b =>
                {
                    b.Property<Guid>("ResponderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ID")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("ResponderID");

                    b.ToTable("Responders");
                });

            modelBuilder.Entity("QuickResponder.Domain.Vaccine", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PatientID")
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("VaccineTakenAt")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PatientID");

                    b.ToTable("Vaccine");
                });

            modelBuilder.Entity("QuickResponder.Domain.Allergy", b =>
                {
                    b.HasOne("QuickResponder.Domain.Patient", null)
                        .WithMany("Allergies")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("QuickResponder.Domain.Incident", b =>
                {
                    b.HasOne("QuickResponder.Domain.Patient", "Patient")
                        .WithMany("Incidents")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickResponder.Domain.Responder", "Responder")
                        .WithMany("PatientHistory")
                        .HasForeignKey("ResponderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Responder");
                });

            modelBuilder.Entity("QuickResponder.Domain.MedicalCondition", b =>
                {
                    b.HasOne("QuickResponder.Domain.Patient", null)
                        .WithMany("MedicalConditions")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("QuickResponder.Domain.MedicalDevice", b =>
                {
                    b.HasOne("QuickResponder.Domain.Patient", null)
                        .WithMany("MedicalEquipment")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("QuickResponder.Domain.Prescription", b =>
                {
                    b.HasOne("QuickResponder.Domain.Medication", "Medication")
                        .WithMany()
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuickResponder.Domain.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("QuickResponder.Domain.Vaccine", b =>
                {
                    b.HasOne("QuickResponder.Domain.Patient", null)
                        .WithMany("VaccineHistory")
                        .HasForeignKey("PatientID");
                });

            modelBuilder.Entity("QuickResponder.Domain.Patient", b =>
                {
                    b.Navigation("Allergies");

                    b.Navigation("Incidents");

                    b.Navigation("MedicalConditions");

                    b.Navigation("MedicalEquipment");

                    b.Navigation("Prescriptions");

                    b.Navigation("VaccineHistory");
                });

            modelBuilder.Entity("QuickResponder.Domain.Responder", b =>
                {
                    b.Navigation("PatientHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
